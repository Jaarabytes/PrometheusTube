# top level version is optional
# https://docs.docker.com/compose/compose-file/#version-top-level-element

# top level name is governed by `COMPOSE_PROJECT_NAME` env var instead
# https://docs.docker.com/compose/compose-file/#name-top-level-element

services:
  frontapi:
    
    build:
      context: front_api
      dockerfile: Dockerfile
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
      labels:
        name: frontapi
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - UserServiceGRPCAddress=userservice:${GRPCPort}
      - VideoServiceGRPCAddress=videoservice:${GRPCPort}
      - SchedulerServiceGRPCAddress=scheduler:${GRPCPort}
      - PartyServiceGRPCAddress=partyservice:${GRPCPort}
      - JaegerAddress=
      - GOLANG_PROTOBUF_REGISTRATION_CONFLICT=warn
    volumes:
      - ./front_api:/horahora/front_api

  rabbitmq:
    build:
      context: activemq
      labels:
        name: activemq
      dockerfile: Dockerfile
      args:
        ACTIVEMQ_IMAGE: ${ACTIVEMQ_IMAGE}
    restart: unless-stopped

  scheduler:
    
    build:
      context: scheduler
      dockerfile: Dockerfile
      args:
        GOLANG_VERSION: ${GOLANG_VERSION}
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
        PYTHON_IMAGE: ${PYTHON_IMAGE}
      labels:
        org.opencontainers.image.source: https://github.com/horahoradev/horahora
        name: scheduler
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=scheduler
      - VideoServiceGRPCAddress=videoservice:${GRPCPort}
      - NumberOfRetries=1
      - SocksConn=${SOCKS_ADDR}
      - SyncPollDelay=1m
      - MaxDLFileSize=300
      - AcceptLanguage=ja
      - rabbit_host=rabbitmq
      - rabbit_port=61613
      - rabbit_user=guest
      - rabbit_pass=guest
    volumes:
      - ./scheduler:/horahora/scheduler

  videoservice:
    
    build:
      context: video_service
      dockerfile: Dockerfile
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
      labels:
        org.opencontainers.image.source: https://github.com/horahoradev/horahora
        name: videoservice
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - redis_host=redis
      - redis_port=6379
      - redis_pass=
      - MaxDailyUploadMB=3000
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=videoservice
      - UserServiceGRPCAddress=userservice:${GRPCPort}
      - BucketName=${BUCKET_NAME}
      - Local=false
      - OriginFQDN=${ORIGIN_FQDN}
      - AWS_DEFAULT_REGION=
      - JaegerAddress=
      - StorageBackend=${STORAGE_BACKEND}
      - StorageAPIID=${STORAGE_API_ID}
      - StorageAPIKey=${STORAGE_API_KEY}
      - StorageEndpoint=${STORAGE_ENDPOINT}
      - ApprovalThreshold=1
      - MaxDLFileSize=300
    volumes:
      - ./video_service:/horahora/videoservice
      - $HOME/.aws/:/root/.aws/:ro

  userservice:
    
    build:
      context: user_service
      dockerfile: Dockerfile
      args:
        GOLANG_IMAGE: ${GOLANG_IMAGE}
        GOLANG_AIR_VERSION: ${GOLANG_AIR_VERSION}
      labels:
        org.opencontainers.image.source: https://github.com/horahoradev/horahora
        name: userservice
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./.env
      - ./.secrets.env
    environment:
      - pgs_host=postgres
      - pgs_port=5432
      - pgs_user=admin
      - pgs_pass=password
      - pgs_db=userservice
      - RSA_KEYPAIR=${JWT_KEYPAIR}
    volumes:
      - ./user_service:/horahora/userservice

  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
      args:
        POSTGRES_IMAGE: ${POSTGRES_IMAGE}
        FLYWAY_VERSION: ${FLYWAY_VERSION}
      labels:
        name: postgres
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - postgresdata_dev:/var/lib/postgresql/data

  horaminio:
    build:
      context: minio
      dockerfile: Dockerfile
      args:
        UBUNTU_IMAGE: ${UBUNTU_IMAGE}
      labels:
        name: minio
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_CACHE=off
    volumes:
      - ./videos:/data

  nginx:
    image: anroe/nginx-headers-more
    restart: unless-stopped
    ports:
      - "9000:80" # backwards compatibility issue
      - "443:443"
    depends_on:
      - frontapi
      - userservice
      - videoservice
      - horaminio
    environment:
      - WEBAPP_ORIGIN=${WEBAPP_ORIGIN}
    volumes:
      - ./static:/etc/nginx/html/static/images
      - ./configs/nginx.conf:/etc/nginx/templates/default.conf.template
      - ./videos/otomads:/etc/nginx/html/otomads
  redis:
    image: "redis:alpine"
    restart: always


# MIT License

# Copyright (c) 2017 Brian Christner

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# I some of the config below from https://github.com/vegasbrianc/prometheus
# thank you for your work!

  

  elasticsearch:
    image: elasticsearch:7.17.10
    restart: unless-stopped
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - discovery.type=single-node
  
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.10
    restart: unless-stopped
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'

  gorse:
    image: zhenghaoz/gorse-in-one
    restart: unless-stopped
    ports:
      - 8086:8086   # gRPC port
      - 8088:8088   # HTTP port
    environment:
      # Use Redis as cache storage backend.
      GORSE_CACHE_STORE: redis://redis:6379
      # Use MySQL as data storage backend.
      GORSE_DATA_STORE: postgres://admin:password@postgres:5432/gorse?sslmode=disable
    command: >
      -c /etc/gorse/config.toml 
      --log-path /var/log/gorse/master.log 
      --cache-path /var/lib/gorse/master_cache.data
    volumes:
      # Mount the configuration file.
      - ./config.toml:/etc/gorse/config.toml
    depends_on:
      - redis
      - postgres

volumes:
  
  postgresdata_dev: {}
  